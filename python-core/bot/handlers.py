import logging
from aiogram import types, Dispatcher
from aiogram.types import Message
from opentelemetry import trace

from utils.input_sanitizer import sanitize_input
from dialog.flow_manager import FlowManager

logger = logging.getLogger(__name__)
tracer = trace.get_tracer("telegram.handler")

async def handle_message(
    message: Message, 
    flow_manager: FlowManager,
    tenant_id: str
):
    user_id = str(message.from_user.id)
    text = message.text or ""
    
    with tracer.start_as_current_span("handle_message") as span:
        span.set_attributes({
            "user.id": user_id,
            "message.length": len(text),
            "tenant.id": tenant_id
        })
        
        try:
            clean_text = sanitize_input(text[:2000])
            
            logger.info(
                f"Message received",
                extra={
                    "user_id": user_id,
                    "tenant_id": tenant_id,
                    "message": clean_text[:100]
                }
            )
            
            if clean_text.startswith("/"):
                await handle_command(message, clean_text)
                return
                
            await message.bot.send_chat_action(message.chat.id, "typing")
            
            response = await flow_manager.process_input(
                user_id=user_id,
                user_text=clean_text,
                metadata={
                    "chat_id": message.chat.id,
                    "message_id": message.message_id,
                    "platform": "telegram"
                }
            )
            
            await send_response(message, response)
            
        except Exception as e:
            logger.exception(
                "Message processing failed",
                extra={"user_id": user_id, "error": str(e)}
            )
            span.record_exception(e)
            await handle_error(message)

async def handle_command(message: Message, command: str):
    command = command.lower().split()[0]
    commands = {
        "/start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sovani AI! –Ø –ø–æ–º–æ–≥—É —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.",
        "/help": "‚ÑπÔ∏è –Ø AI-–ø—Ä–æ–¥–∞–≤–µ—Ü SoVAni. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—à–∏–≤–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ —Å—Ä–æ–∫–∞—Ö. –ü—Ä–∏–º–µ—Ä: ¬´–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç 100 —Ö–∞–ª–∞—Ç–æ–≤ –∏–∑ —Ö–ª–æ–ø–∫–∞?¬ª",
        "/reset": "üîÑ –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!",
    }
    response = commands.get(command, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    await message.answer(response)

async def send_response(message: Message, response: dict):
    if response.get("error"):
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    fsm = response.get("fsm", {})
    llm = response.get("llm", {})
    
    if llm and llm.get("content"):
        await message.answer(llm["content"])
    elif fsm and fsm.get("response"):
        await message.answer(fsm["response"])
    else:
        await message.answer("ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?")

async def handle_error(message: Message):
    await message.answer(
        "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à–∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. "
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
    )

def register_handlers(dp: Dispatcher, flow_manager: FlowManager, tenant_id: str):
    dp.register_message_handler(
        lambda m: handle_message(m, flow_manager, tenant_id),
        content_types=types.ContentType.TEXT
    )
    from .middleware import AntiFloodMiddleware
    dp.middleware.setup(AntiFloodMiddleware(limit=1.0))
