import os
import logging
import time
from typing import List, Dict, Optional

from dotenv import load_dotenv
from openai import OpenAI, OpenAIError

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(dotenv_path=os.path.expanduser("~/ai_seller/project/.env"))

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    raise EnvironmentError("OPENAI_API_KEY is not set")

client = OpenAI(api_key=api_key)


def generate_response(
    prompt: str,
    system_prompt: Optional[str] = None,
    message_history: Optional[List[Dict[str, str]]] = None,
    model: str = "gpt-4o") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞.

    :param prompt: —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param system_prompt: —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    :param message_history: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π [{"role": ..., "content": ...}]
    :param model: –º–æ–¥–µ–ª—å OpenAI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
    :return: –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    if message_history:
        messages.extend(message_history[-8:])  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    messages.append({"role": "user", "content": prompt})

    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (model={model}) ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")

    # –ó–∞–ø—Ä–æ—Å
    max_retries = 3
    for attempt in range(1, max_retries + 1):
        try:
            response = client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=0.7,
                max_tokens=1000,
            )
            reply = response.choices[0].message.content.strip()
            return reply
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} ‚Äî –æ—à–∏–±–∫–∞ OpenAI: {e}")
            time.sleep(2 ** attempt)
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

